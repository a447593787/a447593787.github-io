<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Weiliang Lin</title>
    <link>https://a447593787.github.io/tags/hugo/</link>
    <description>Recent content in Hugo on Weiliang Lin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Oct 2020 17:50:20 +0800</lastBuildDate><atom:link href="https://a447593787.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java</title>
      <link>https://a447593787.github.io/1/</link>
      <pubDate>Mon, 19 Oct 2020 17:50:20 +0800</pubDate>
      
      <guid>https://a447593787.github.io/1/</guid>
      <description>123 123456
 125
·
   sad  alt 123 
  图片 1 
  图片1</description>
    </item>
    
    <item>
      <title>测试文章</title>
      <link>https://a447593787.github.io/java_duoxiancheng/</link>
      <pubDate>Mon, 19 Oct 2020 17:50:20 +0800</pubDate>
      
      <guid>https://a447593787.github.io/java_duoxiancheng/</guid>
      <description>java多线程详解 三种创建方式   Thread class：继承Thread类(重点)，重写run()方法，创建一个线程对象，调用start()开启线程，线程不一定立即执行，cpu调度多线程
  Runnable接口：实现Runnable接口(重点)，重写run方法，创建runnable接口的实现类对象，创建线程对象，通过线程对象来开启我们的线程，代理，调用start方法
new Thread(testThread3).start
  Callable接口：实现Callable接口(了解)
好处：可以定义返回值，可以跑出异常
  多个线程操作同一个资源的情况下，线程不安全，数据紊乱
静态代理 婚庆公司！
静态代理模式总结：
真实对象和代理对象都要实现统一个接口，代理对象要代理真实角色
代理对象可以做很多真实对象做不了的事情
真实对象专注做自己的事情
Lamda表达式 函数式 接口：
Lamda表达式
线程状态   线程停止
建议线程正常停止&amp;mdash;&amp;gt;利用次数，不建议死循环
建议使用标志位&amp;mdash;&amp;gt;设置一个标志位
不要使用stop或者destory等过时或者jdk不建议使用的方法。
  线程休眠
sleep指定当前线程阻塞的毫秒数
  线程礼让——yield
  线程强制执行——join
想象为插队
  </description>
    </item>
    
    <item>
      <title>测试文章</title>
      <link>https://a447593787.github.io/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</link>
      <pubDate>Mon, 19 Oct 2020 17:50:20 +0800</pubDate>
      
      <guid>https://a447593787.github.io/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</guid>
      <description>java多线程详解 三种创建方式   Thread class：继承Thread类(重点)，重写run()方法，创建一个线程对象，调用start()开启线程，线程不一定立即执行，cpu调度多线程
  Runnable接口：实现Runnable接口(重点)，重写run方法，创建runnable接口的实现类对象，创建线程对象，通过线程对象来开启我们的线程，代理，调用start方法
new Thread(testThread3).start
  Callable接口：实现Callable接口(了解)
好处：可以定义返回值，可以跑出异常
  多个线程操作同一个资源的情况下，线程不安全，数据紊乱
静态代理 婚庆公司！
静态代理模式总结：
真实对象和代理对象都要实现统一个接口，代理对象要代理真实角色
代理对象可以做很多真实对象做不了的事情
真实对象专注做自己的事情
Lamda表达式 函数式 接口：
Lamda表达式
线程状态   线程停止
建议线程正常停止&amp;mdash;&amp;gt;利用次数，不建议死循环
建议使用标志位&amp;mdash;&amp;gt;设置一个标志位
不要使用stop或者destory等过时或者jdk不建议使用的方法。
  线程休眠
sleep指定当前线程阻塞的毫秒数
  线程礼让——yield
  线程强制执行——join
想象为插队
  </description>
    </item>
    
  </channel>
</rss>
